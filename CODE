/**
 * Password manager
 *
 * @author Benjamin Wutz
 * @since 2021-7-14
 */

import java.util.Scanner;
import java.util.Random;

public class Password {

	public static void main(String[] args) {

		
		// Create an instance of Scanner
		Scanner sc = new Scanner(System.in);
		
		// Call 'displayMenu()' to show the menu to the user
		displayMenu(sc);
	
		// Read in input from user and assign to 'choice'
		int choice = sc.nextInt();

        // IF-ELSE statements to decide which method to call
		if (choice == 1) {    // display password specifications to the user
		
			showPasswordSpecifications();
		
		} else if (choice == 2) {	// generate a random password for the user
		    
		    	System.out.println("\nYour password is: " + generateRandomPassword(sc));
		    
		} else if (choice == 3) {   // ask the user to input a password and test for validity
		    
		    System.out.println("\nEnter a password to test:");
			
			sc.nextLine();
			
			String input = sc.nextLine();
			
			if (verifyPasswordSpecifications(input) == true) {
				
				System.out.println("\nYour password is valid.");
				
			} else {
			    
				System.out.println("\nYour password is NOT valid.");
				
			}
			
		} else {
			
			System.out.println("Sorry! That was an invalid option.");
			
		}

        // close the scanner
		sc.close();

	}

	public static void displayMenu(Scanner sc) {
		// PRE-CONDITIONS: None
		// POST-CONDITIONS: This method displays the menu of options 
		// (as per the specifications)		
		
		System.out.println("Here is your menu of options:");
		
		System.out.println("    1. See the password rules");
		
		System.out.println("    2. Generate a random password");
		
		System.out.println("    3. Test the validity of a password");
	
	    System.out.println();
	    
	    System.out.println("Please make your selection:");

	}

	public static String generateRandomPassword(Scanner sc) {  
		// PRE-CONDITIONS: The scanner used to read in the random number generator 
		// seed from the user
		
		// POST-CONDITIONS: A password that satisfies the specifications is
		// generated and returned.
		
		// This method will return a String password that subscribes to
		// the following criteria:
		
		// 1. There are eight characters in the password
		// 2. The first two characters are lowercase letters.
		// 3. The second two characters are uppercase letters.
		// 3. The characters in positions 4 and 5 are numbers.
		// 4. The characters in positions 6 and 7 are any character.

	    String tempPass = "";	// this String will become the password
	    
	    System.out.println();
	    
	    Random random = new Random();
	    
	    char randomChar;
	    
	    char randomChar2;
	    
	    char randomChar3;
	    
	    char randomChar4;
	    
	    char randomChar5;
	    
	    char randomChar6;
	    
	    char randomChar7;
	    
	    char randomChar8;
	    
	    randomChar = (char)(random.nextInt(26) + 'a');
	    
	    randomChar2 = (char)(random.nextInt(26) + 'a');
	    
	    randomChar3 = (char)(random.nextInt(26) + 'A');
	    
	    randomChar4 = (char)(random.nextInt(26) + 'A');
	    
	    randomChar5 = (char)(random.nextInt(10) + '0');
	    
	    randomChar6 = (char)(random.nextInt(10) + '0');
	    
	    randomChar7 = (char)(random.nextInt(94) + '0');
	    
	    randomChar8 = (char)(random.nextInt(94) + '0');
	    
	    tempPass += randomChar;
	    
	    tempPass += randomChar2;
	    
	    tempPass += randomChar3;
	    
	    tempPass += randomChar4;
	    
		tempPass += randomChar5;
		
		tempPass += randomChar6;
        
        tempPass += randomChar7;
        
        tempPass += randomChar8;
		
		return tempPass;

	}

	public static void showPasswordSpecifications() {
		// PRE-CONDITIONS: None
		// POST-CONDITIONS: The specifications for a valid password are
		// displayed on the screen
		
		System.out.println();
		
		System.out.println("The rules for your password are:");
		
		System.out.println("    1. It must be at least 8 characters long");
		
		System.out.println("    2. At least one letter must be capitalized");
		
		System.out.println("    3. It must contain at least 2 numbers");
		

	}

	public static boolean verifyPasswordSpecifications(String input) {
		// PRE-CONDITIONS: The main method will pass in a String
		// POST-CONDITIONS: "true" will be returned if the parameter "input" is
		// a valid password, as per the specifications. "false" will be returned otherwise
		//
		// The specifications are:
		// 1. There are at least eight characters in the password
		// 2. At least one of the characters is capitalized
		// 3. There are at least two digits (0-9) in the password
        
        int numberOfDigits = 0;

		if (input.length() < 8){
		    
		    return false;
	
		}else if (input == input.toLowerCase()){
		    
		    return false;
		 
		}else {
		    
		    for(int i = 0; i < input.length(); i++){
		        
		        if (Character.isDigit(input.charAt(i))){
		            
		            numberOfDigits++;
		        }
		    }  
		    
		    if (numberOfDigits < 2){
		        
		        return false;
		    }
		}
		   
		return true;   
		
	 
		
		
	//	System.out.println("verifyPasswordSpecifications(" + input + ") was called and 'true' was returned.");
		
		

	}

}
